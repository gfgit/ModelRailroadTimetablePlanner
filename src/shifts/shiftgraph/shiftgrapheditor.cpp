#include "shiftgrapheditor.h"

#include <QVBoxLayout>

#include <QToolBar>

#include "view/shiftgraphview.h"
#include "model/shiftgraphscene.h"

#include "jobchangeshiftdlg.h"

#include "app/session.h"

#include <QPrintDialog>
#include <QFileDialog>
#include <QStandardPaths>
#include "utils/files/file_format_names.h"
#include "utils/files/openfileinfolder.h"
#include "utils/owningqpointer.h"

#include <QPainter>

#include <QPrinter>
#include <QSvgGenerator>

#include "info.h"

#include <QDebug>

ShiftGraphEditor::ShiftGraphEditor(QWidget *parent) :
    QWidget(parent)
{
    toolBar = new QToolBar;
    toolBar->addAction(tr("Save"), this, &ShiftGraphEditor::onSaveGraph);
    toolBar->addAction(tr("Print"), this, &ShiftGraphEditor::onPrintGraph);
    toolBar->addAction(tr("Refresh"), this, &ShiftGraphEditor::redrawGraph);


    m_scene = new ShiftGraphScene(Session->m_Db, this);
    m_scene->loadShifts();

    view = new ShiftGraphView;
    view->setScene(m_scene);

    QVBoxLayout *lay = new QVBoxLayout(this);
    lay->addWidget(toolBar);
    lay->addWidget(view);

    setMinimumSize(500, 400);
    setWindowTitle(tr("Shift Graph"));
}

ShiftGraphEditor::~ShiftGraphEditor()
{

}

void ShiftGraphEditor::redrawGraph()
{
    m_scene->loadShifts();
}

void ShiftGraphEditor::onSaveGraph()
{
    OwningQPointer<QFileDialog> dlg = new QFileDialog(this, tr("Save Shift Graph"));
    dlg->setFileMode(QFileDialog::AnyFile);
    dlg->setAcceptMode(QFileDialog::AcceptSave);
    dlg->setDirectory(QStandardPaths::writableLocation(QStandardPaths::DocumentsLocation));

    QStringList filters;
    filters << FileFormats::tr(FileFormats::svgFile);
    filters << FileFormats::tr(FileFormats::pdfFile);
    dlg->setNameFilters(filters);

    if(dlg->exec() != QDialog::Accepted || !dlg)
        return;

    QString fileName = dlg->selectedUrls().value(0).toLocalFile();

    if(fileName.isEmpty())
        return;

    if(fileName.endsWith(QStringLiteral(".pdf")) || dlg->selectedNameFilter().contains("pdf"))
    {
        exportPDF(fileName);
    }
    else
    {
        exportSVG(fileName);
    }

    utils::OpenFileInFolderDlg::askUser(tr("Shift Graph Saved"), fileName, this);
}

void ShiftGraphEditor::onPrintGraph()
{
    QPrinter printer;

    OwningQPointer<QPrintDialog> dlg = new QPrintDialog(&printer, this);

    if(dlg->exec() != QDialog::Accepted)
        return;

    QPainter painter(&printer);
    renderGraph(&painter);
}

void ShiftGraphEditor::exportSVG(const QString& fileName)
{
    QSvgGenerator svg;
    svg.setTitle(QStringLiteral("Railway Shift"));
    svg.setDescription(QStringLiteral("Generated by %1").arg(AppDisplayName));

    QPainter painter;

    QSize sceneSz = m_scene->getContentSize();
    QRectF sceneRect;
    sceneRect.setSize(sceneSz);

    svg.setSize(sceneSz);
    svg.setViewBox(sceneRect);

    svg.setFileName(fileName);

    painter.begin(&svg);
    renderGraph(&painter);
}

void ShiftGraphEditor::exportPDF(const QString& fileName)
{
    QPrinter printer;
    printer.setOutputFormat(QPrinter::PdfFormat);
    printer.setOutputFileName(fileName);
    printer.setCreator(AppDisplayName);
    printer.setDocName(QStringLiteral("Railway Shift"));

    QPageLayout lay = printer.pageLayout();
    lay.setPageSize(QPageSize(m_scene->getContentSize(), QPageSize::Point));
    printer.setPageLayout(lay);

    QPainter painter(&printer);
    renderGraph(&painter);
}

void ShiftGraphEditor::showShiftMenuForJob(db_id jobId)
{
    OwningQPointer<JobChangeShiftDlg> dlg = new JobChangeShiftDlg(Session->m_Db, this);
    dlg->setJob(jobId);
    dlg->exec();
}

void ShiftGraphEditor::renderGraph(QPainter *painter)
{
    QRectF sceneRect;
    sceneRect.setSize(m_scene->getContentSize());

    QRectF hourPanelRect = sceneRect;
    hourPanelRect.setHeight(AppSettings.getShiftVertOffset() - 5); //See ShiftGraphView::resizeHeaders()

    QRectF shiftLabelHeader = sceneRect;
    shiftLabelHeader.setWidth(AppSettings.getShiftHorizOffset() - 5); //See ShiftGraphView::resizeHeaders()

    m_scene->drawHourLines(painter, sceneRect);
    m_scene->drawShifts(painter, sceneRect);
    m_scene->drawHourHeader(painter, hourPanelRect, 0);
    m_scene->drawShiftHeader(painter, shiftLabelHeader, 0);
}
