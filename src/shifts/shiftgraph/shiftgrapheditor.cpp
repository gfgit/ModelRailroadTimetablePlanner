#include "shiftgrapheditor.h"

#include <QVBoxLayout>

#include <QGraphicsView>
#include <QToolBar>

#include "graphoptions.h"

#include "shiftgraphholder.h"
#include "shiftscene.h"

#include "jobchangeshiftdlg.h"

#include "app/session.h"

#include <QFileDialog>
#include <QStandardPaths>
#include "utils/files/file_format_names.h"
#include "utils/files/openfileinfolder.h"

#include <QDebug>

#include <QPrinter>
#include <QSvgGenerator>

#include <QPainter>

#include <QPrintDialog>
#include "utils/owningqpointer.h"
#include "info.h"

ShiftGraphEditor::ShiftGraphEditor(QWidget *parent) :
    QWidget(parent)
{
    toolBar = new QToolBar;
    toolBar->addAction(tr("Save"), this, &ShiftGraphEditor::onSaveGraph);
    toolBar->addAction(tr("Print"), this, &ShiftGraphEditor::onPrintGraph);
    toolBar->addAction(tr("Options"), this, &ShiftGraphEditor::onShowOptions);
    toolBar->addAction(tr("Refresh"), this, &ShiftGraphEditor::calculateGraph);

    view = new QGraphicsView;
    view->setAlignment(Qt::AlignTop);

    graph = new ShiftGraphHolder(Session->m_Db, this);
    graph->loadShifts();
    view->setScene(graph->scene());
    view->centerOn(0, 0);
    connect(graph->scene(), &ShiftScene::jobDoubleClicked, this, &ShiftGraphEditor::showShiftMenuForJob);

    QVBoxLayout *lay = new QVBoxLayout(this);
    lay->addWidget(toolBar);
    lay->addWidget(view);

    setMinimumSize(300, 200);
    setWindowTitle(tr("Shift Graph Editor"));
}

ShiftGraphEditor::~ShiftGraphEditor()
{

}

void ShiftGraphEditor::onSaveGraph()
{
    OwningQPointer<QFileDialog> dlg = new QFileDialog(this, tr("Save Shift Graph"));
    dlg->setFileMode(QFileDialog::AnyFile);
    dlg->setAcceptMode(QFileDialog::AcceptSave);
    dlg->setDirectory(QStandardPaths::writableLocation(QStandardPaths::DocumentsLocation));

    QStringList filters;
    filters << FileFormats::tr(FileFormats::svgFile);
    filters << FileFormats::tr(FileFormats::pdfFile);
    dlg->setNameFilters(filters);

    if(dlg->exec() != QDialog::Accepted || !dlg)
        return;

    QString fileName = dlg->selectedUrls().value(0).toLocalFile();

    if(fileName.isEmpty())
        return;

    if(fileName.endsWith(QStringLiteral(".pdf")) || dlg->selectedNameFilter().contains("pdf"))
    {
        exportPDF(fileName);
    }
    else
    {
        exportSVG(fileName);
    }

    utils::OpenFileInFolderDlg::askUser(tr("Shift Graph Saved"), fileName, this);
}

void ShiftGraphEditor::onPrintGraph()
{
    QPrinter printer;

    OwningQPointer<QPrintDialog> dlg = new QPrintDialog(&printer, this);

    if(dlg->exec() != QDialog::Accepted)
        return;

    print(&printer);
}

void ShiftGraphEditor::exportSVG(const QString& fileName)
{
    QSvgGenerator svg;
    svg.setTitle(QStringLiteral("Railway Shift"));
    svg.setDescription(QStringLiteral("Generated by %1").arg(AppDisplayName));

    QPainter painter;

    auto scene = graph->scene();
    QRectF r = scene->sceneRect();
    svg.setSize(r.size().toSize());
    svg.setViewBox(r);

    svg.setFileName(fileName);

    painter.begin(&svg);

    scene->render(&painter);
}

void ShiftGraphEditor::exportPDF(const QString& fileName)
{
    QPrinter printer;
    printer.setOutputFormat(QPrinter::PdfFormat);
    printer.setOutputFileName(fileName);
    printer.setCreator(AppDisplayName);
    printer.setDocName(QStringLiteral("Railway Shift"));

    print(&printer);
}

void ShiftGraphEditor::print(QPrinter *printer)
{
    QPainter painter(printer);
    auto scene = graph->scene();
    scene->render(&painter);
}

void ShiftGraphEditor::calculateGraph()
{
    graph->redrawGraph();
    refreshView();
}

void ShiftGraphEditor::refreshView()
{
    view->update();
}

void ShiftGraphEditor::onShowOptions()
{
    OwningQPointer<GraphOptions> dlg = new GraphOptions(this);
    dlg->setHideSameStations(graph->getHideSameStations());

    int ret = dlg->exec();
    if(dlg && ret == QDialog::Accepted)
    {
        graph->setHideSameStations(dlg->hideSameStation());
    }
}

void ShiftGraphEditor::showShiftMenuForJob(db_id jobId)
{
    OwningQPointer<JobChangeShiftDlg> dlg = new JobChangeShiftDlg(Session->m_Db, this);
    dlg->setJob(jobId);
    dlg->exec();
}
