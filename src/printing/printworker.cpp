#include "printworker.h"

#include <QPainter>

#include <QPrinter>

#include <QPicture>

#include <QGraphicsScene>

#include "graph/graphmanager.h"
#include "graph/backgroundhelper.h"

#include <QDebug>

#include <QSvgGenerator>

#include "info.h"

PrintWorker::PrintWorker(QObject *parent) :
    QObject(parent),
    differentFiles(false),
    outType(Print::Native)
{

}

void PrintWorker::setScenes(const Scenes &scenes)
{
    m_scenes = scenes;
}

void PrintWorker::doWork()
{
    emit progress(0);

    switch (outType)
    {
    case Print::Native:
    {
        m_printer->setOutputFormat(QPrinter::NativeFormat);
        printNormal();
        break;
    }
    case Print::Pdf:
    {
        m_printer->setOutputFormat(QPrinter::PdfFormat);
        m_printer->setCreator(AppDisplayName);
        m_printer->setDocName(QStringLiteral("Session"));

        if(differentFiles)
        {
            printPdfMultipleFiles();
        }
        else
        {
            m_printer->setOutputFileName(fileOutput);
            printNormal();
        }
        break;
    }
    case Print::Svg:
    {
        printSvg();
    }
    }

    emit finished();
}

void PrintWorker::printPdfMultipleFiles()
{
    QPainter painter;
    m_printer->setOutputFormat(QPrinter::PdfFormat);

    const QString fmt = QString("%1/%2.pdf").arg(fileOutput);

    const int size = m_scenes.size();
    for(int i = 0; i < size; i++)
    {
        auto p = m_scenes[i];
        emit description(p.name);

        m_printer->setOutputFileName(fmt.arg(p.name));
        painter.begin(m_printer);

        printScene(&painter, p);

        painter.end();

        emit progress(i + 1);
    }
}

void PrintWorker::printSvg()
{
    QSvgGenerator svg;
    svg.setTitle(QStringLiteral("Railway Line"));
    svg.setDescription(QStringLiteral("Generated by %1").arg(AppDisplayName)); //TODO: make constant, it's used also in other places

    QPainter painter;

    const QString fmt = QString("%1/%2.svg").arg(fileOutput);

    const int size = m_scenes.size();
    for(int i = 0; i < size; i++)
    {
        auto p = m_scenes[i];
        emit description(p.name);

        QRectF r = p.scene->sceneRect();
        svg.setSize(r.size().toSize());
        svg.setViewBox(r);

        svg.setFileName(fmt.arg(p.name));
        painter.begin(&svg);

        printScene(&painter, p);

        painter.end();

        emit progress(i + 1);
    }
}

void PrintWorker::printNormal()
{
    QPainter painter(m_printer);
    const int size = m_scenes.size();
    for(int i = 0; i < size; i++)
    {
        auto p = m_scenes[i];
        emit description(p.name);

        printScene(&painter, p);

        emit progress(i + 1);

        if(i < size - 1)
            m_printer->newPage(); //Don't add a last empty page
    }
}

void PrintWorker::setPrinter(QPrinter *printer)
{
    m_printer = printer;
}

void PrintWorker::setOutputType(Print::OutputType type)
{
    outType = type;
}

void PrintWorker::printScene(QPainter *painter, const Scene& s)
{
    //TODO: maybe optimize: scale and draw directly on printer?
    QRectF source = s.scene->sceneRect();
    auto realDev = painter->device();
    QRectF target = QRectF(0, 0, realDev->width(), realDev->height());

    const qreal textHeight = 20;
    target.setTop(target.top() + textHeight);

    //Intermidiate painting on temp QPicture then we scale and play picture on printer
    QPicture tmpPic;
    QPainter p(&tmpPic);

    BackgroundHelper *helper = graphMgr->getBackGround();
    QRectF labelsRect = source;
    labelsRect.setHeight(helper->getVertOffset());

    helper->drawBackgroundLines(&p, source);
    s.scene->render(&p);
    helper->drawForegroundHours(&p, source, 0);
    helper->drawForegroundStationLabels(&p, labelsRect,
                                        0, s.lineId);

    p.end();

    qreal xScale = target.width() / source.width();
    qreal yScale = target.height() / source.height();
    xScale = yScale = qMin(xScale, yScale);

    painter->save();

    QRectF r(QPointF(0, 0), target.topRight());
    QFont f;
    f.setPointSize(15);
    painter->setFont(f);

    qDebug() << f << s.name << r;

    painter->drawText(r, Qt::AlignCenter, s.name);

    painter->translate(target.topLeft());
    painter->scale(xScale, yScale);
    painter->drawPicture(0, 0, tmpPic);

    painter->restore();
}

void PrintWorker::setGraphMgr(GraphManager *value)
{
    graphMgr = value;
}

void PrintWorker::setFileOutput(const QString &value, bool different)
{
    fileOutput = value;
    if(fileOutput.endsWith('/'))
        fileOutput.chop(1);
    differentFiles = different;
}
